<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:ns="http://www.tibco.com/namespaces/tnt/plugins/jms" xmlns:TM="java://com.trendmicro.TMBWUtilities" xmlns:pfx5="http://www.trendmicro.com/ESB/schemas/error" xmlns:pfx4="http://www.tibco.com/schemas/ACSService2.1/ExternalServices/ToACS/2.1 Subprocesses/Functions/XSD/GetSRNumber.xsd" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx3="http://www.tibco.com/ns/no_namespace_schema_location/XSD/Neuron/SRFEscalateMalwareCase.xsd" xmlns:pfx2="http://www.tibco.com/schemas/ACSService2.1/WSDL/Client/ThreatService/SRFEscalateMalwareCase.xsd" xmlns:pfx9="http://www.tibco.com/ns/no_namespace_schema_location/XSD/Common/EvnetMsg/NeronSubmissionInputType.xsd" xmlns:pfx8="http://www.tibco.com/ns/no_namespace_schema_location/XSD/Common/EvnetMsg/SubmittingInput.xsd" xmlns:pfx7="http://www.trendmicro.com/ESB/schemas/messageHeader" xmlns:pfx6="http://trend.com.tw/PSCWSDL" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:ns14="http://www.tibco.com/pe/WriteToLogActivitySchema" xmlns:ns15="http://www.tibco.com/schemas/ThreatService/WSDL/Client/ThreatService/SRFEscalateMalwareCase.xsd" xmlns:ns9="http://www.tibco.com/schemas/ACSService2.1/ExternalServices/ToACS/2.1 Subprocesses/Functions/XSD/GetNeuronServiceMainByServiceID.xsd" xmlns:ns12="http://www.tibco.com/schemas/ACSService2.1/ExternalServices/ToACS/2.1 Subprocesses/Functions/XSD/GetFileMainByFileItemid.xsd" xmlns:ns5="http://www.trendmicro.com/PSC/PSC_CreateSRActivityRq" xmlns:ns13="http://www.tibco.com/schemas/GCCPortal/XSD/PSC/GCCSRCase.xsd" xmlns:ns6="http://www.tibco.com/schemas/GCCPortal/XSD/PSC/GCCSRCaseResult.xsd" xmlns:pfx="http://schemas.xmlsoap.org/soap/envelope/" xmlns:ns7="http://www.trendmicro.com/PSC/PSC_CreateSRCaseRs" xmlns:ns10="http://www.trendmicro.com/PSC/PSC_CreateSRCaseRq" xmlns:ns8="http://www.tibco.com/schemas/GCCPortal/XSD/PSC/GCCSRCaseActivity.xsd" xmlns:ns11="http://www.tibco.com/pe/DeployedVarsType" xmlns:ns2="http://www.tibco.com/pe/EngineTypes" xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:ns1="http://www.trendmicro.com/ESB/ACS/schemas/SMF" xmlns:ns4="http://www.tibco.com/pe/GenerateErrorActivity/InputSchema" xmlns:ns3="http://tempuri.org/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <xsd:import namespace="http://www.trendmicro.com/ESB/schemas/error" schemaLocation="/XSD/Common/error.xsd"/>
    <xsd:import namespace="http://schemas.xmlsoap.org/soap/envelope/" schemaLocation="/XSD/Common/soap.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/XSD/Neuron/SRFEscalateMalwareCase.xsd" schemaLocation="/XSD/Neuron/SRFEscalateMalwareCase.xsd"/>
    <xsd:import namespace="http://www.tibco.com/schemas/ACSService2.1/WSDL/Client/ThreatService/SRFEscalateMalwareCase.xsd" schemaLocation="/WSDL/Client/ThreatService/SRFEscalateMalwareCase.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/XSD/Common/EvnetMsg/SubmittingInput.xsd" schemaLocation="/XSD/Common/EvnetMsg/SubmittingInput.xsd"/>
    <xsd:import namespace="http://www.tibco.com/ns/no_namespace_schema_location/XSD/Common/EvnetMsg/NeronSubmissionInputType.xsd" schemaLocation="/XSD/Common/EvnetMsg/NeronSubmissionInputType.xsd"/>
    <pd:name>Services/Neuron Service/G2 Escalate Malware Case.process</pd:name>
    <pd:startName>JMS Queue Receiver</pd:startName>
    <pd:startX>0</pd:startX>
    <pd:startY>0</pd:startY>
    <pd:returnBindings/>
    <pd:starter name="JMS Queue Receiver">
        <pd:type>com.tibco.plugin.jms.JMSQueueEventSource</pd:type>
        <pd:resourceType>ae.activities.JMSQueueEventSource</pd:resourceType>
        <pd:x>91</pd:x>
        <pd:y>70</pd:y>
        <config>
            <PermittedMessageType>XML Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
                <destination>%%Services/NeuronService/EscalateMalwareCase/DestinationQueue%%</destination>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
            </ConfigurableHeaders>
            <ConnectionReference>/Resources/JMS/JMS Connection.sharedjmscon</ConnectionReference>
            <OutDataxsdString ref="pfx:Envelope"/>
        </config>
        <pd:inputBindings/>
    </pd:starter>
    <pd:endName>End</pd:endName>
    <pd:endX>1075</pd:endX>
    <pd:endY>183</pd:endY>
    <pd:errorSchemas>
        <ErrorMessage ref="pfx5:Error"/>
    </pd:errorSchemas>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1407221370285</pd:targetNamespace>
    <pd:activity name="Reply to JMS Message">
        <pd:type>com.tibco.plugin.jms.JMSReplyActivity</pd:type>
        <pd:resourceType>ae.activities.JMSReplyActivity</pd:resourceType>
        <pd:x>942</pd:x>
        <pd:y>190</pd:y>
        <config>
            <PermittedMessageType>XML Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
                <EventSource>JMS Queue Receiver</EventSource>
            </ConfigurableHeaders>
            <InDataxsdString ref="pfx:Envelope"/>
        </config>
        <pd:inputBindings>
            <ns:ActivityInput>
                <Body>
                    <pfx:Envelope>
                        <pfx:Body>
                            <pfx2:SRFEscalateMalwareCaseRs>
                                <xsl:for-each select="$JMS-Queue-Receiver/ns:ActivityOutput/Body/pfx:Envelope/pfx:Body/pfx2:SRFEscalateMalwareCaseRq[1]/pfx2:RequestHeader">
                                    <pfx2:RequestHeader>
                                        <ns1:MessageKey>
                                            <xsl:value-of select="ns1:MessageKey"/>
                                        </ns1:MessageKey>
                                        <ns1:ServiceName>
                                            <xsl:value-of select="ns1:ServiceName"/>
                                        </ns1:ServiceName>
                                        <ns1:ServiceVersion>
                                            <xsl:value-of select="ns1:ServiceVersion"/>
                                        </ns1:ServiceVersion>
                                        <ns1:SourceID>
                                            <xsl:value-of select="ns1:SourceID"/>
                                        </ns1:SourceID>
                                        <xsl:if test="ns1:SourceIP">
                                            <ns1:SourceIP>
                                                <xsl:value-of select="ns1:SourceIP"/>
                                            </ns1:SourceIP>
                                        </xsl:if>
                                        <xsl:if test="ns1:RqTimestamp">
                                            <ns1:RqTimestamp>
                                                <xsl:value-of select="ns1:RqTimestamp"/>
                                            </ns1:RqTimestamp>
                                        </xsl:if>
                                        <ns1:RsTimestamp>
                                            <xsl:value-of select="current-dateTime()"/>
                                        </ns1:RsTimestamp>
                                        <xsl:if test="ns1:Priority">
                                            <ns1:Priority>
                                                <xsl:value-of select="ns1:Priority"/>
                                            </ns1:Priority>
                                        </xsl:if>
                                    </pfx2:RequestHeader>
                                </xsl:for-each>
                                <pfx2:RequestBody>
                                    <pfx2:Result>
                                        <xsl:value-of select="&quot;SUCCESS&quot;"/>
                                    </pfx2:Result>
                                </pfx2:RequestBody>
                            </pfx2:SRFEscalateMalwareCaseRs>
                        </pfx:Body>
                    </pfx:Envelope>
                </Body>
            </ns:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Parse XML">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>150</pd:x>
        <pd:y>198</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>true</validateOutput>
            <term>
                <xsd:element name="Neuron" type="pfx3:SRFEscalateMalwareCaseNeuronType"/>
            </term>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$JMS-Queue-Receiver/ns:ActivityOutput/Body/pfx:Envelope/pfx:Body/*" element="pfx2:SRFEscalateMalwareCaseRq"/>
        </pd:coercions>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="$JMS-Queue-Receiver/ns:ActivityOutput/Body/pfx:Envelope/pfx:Body/pfx2:SRFEscalateMalwareCaseRq[1]/pfx2:RequestBody/pfx2:inputXml"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Catch">
        <pd:type>com.tibco.pe.core.CatchActivity</pd:type>
        <pd:resourceType>ae.activities.catch</pd:resourceType>
        <pd:x>771</pd:x>
        <pd:y>315</pd:y>
        <pd:handler>true</pd:handler>
        <config>
            <catchAll>true</catchAll>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Reply-to-JMS-Message-1">
        <pd:type>com.tibco.plugin.jms.JMSReplyActivity</pd:type>
        <pd:resourceType>ae.activities.JMSReplyActivity</pd:resourceType>
        <pd:x>1041</pd:x>
        <pd:y>319</pd:y>
        <config>
            <PermittedMessageType>XML Text</PermittedMessageType>
            <SessionAttributes>
                <transacted>false</transacted>
                <acknowledgeMode>1</acknowledgeMode>
                <maxSessions>1</maxSessions>
            </SessionAttributes>
            <ConfigurableHeaders>
                <JMSDeliveryMode>PERSISTENT</JMSDeliveryMode>
                <JMSExpiration>0</JMSExpiration>
                <JMSPriority>4</JMSPriority>
                <EventSource>JMS Queue Receiver</EventSource>
            </ConfigurableHeaders>
            <InDataxsdString ref="pfx:Envelope"/>
        </config>
        <pd:inputBindings>
            <ns:ActivityInput>
                <Body>
                    <pfx:Envelope>
                        <pfx:Body>
                            <pfx2:SRFEscalateMalwareCaseRs>
                                <xsl:for-each select="$JMS-Queue-Receiver/ns:ActivityOutput/Body/pfx:Envelope/pfx:Body/pfx2:SRFEscalateMalwareCaseRq[1]/pfx2:RequestHeader">
                                    <pfx2:RequestHeader>
                                        <ns1:MessageKey>
                                            <xsl:value-of select="ns1:MessageKey"/>
                                        </ns1:MessageKey>
                                        <ns1:ServiceName>
                                            <xsl:value-of select="ns1:ServiceName"/>
                                        </ns1:ServiceName>
                                        <ns1:ServiceVersion>
                                            <xsl:value-of select="ns1:ServiceVersion"/>
                                        </ns1:ServiceVersion>
                                        <ns1:SourceID>
                                            <xsl:value-of select="ns1:SourceID"/>
                                        </ns1:SourceID>
                                        <xsl:if test="ns1:SourceIP">
                                            <ns1:SourceIP>
                                                <xsl:value-of select="ns1:SourceIP"/>
                                            </ns1:SourceIP>
                                        </xsl:if>
                                        <xsl:if test="ns1:RqTimestamp">
                                            <ns1:RqTimestamp>
                                                <xsl:value-of select="ns1:RqTimestamp"/>
                                            </ns1:RqTimestamp>
                                        </xsl:if>
                                        <ns1:RsTimestamp>
                                            <xsl:value-of select="current-dateTime()"/>
                                        </ns1:RsTimestamp>
                                        <xsl:if test="ns1:Priority">
                                            <ns1:Priority>
                                                <xsl:value-of select="ns1:Priority"/>
                                            </ns1:Priority>
                                        </xsl:if>
                                    </pfx2:RequestHeader>
                                </xsl:for-each>
                                <pfx2:RequestBody>
                                    <pfx2:Result>
                                        <xsl:value-of select="&quot;FAIL&quot;"/>
                                    </pfx2:Result>
                                    <pfx2:Error>
                                        <pfx2:ErrorCode>
                                            <xsl:value-of select="9999"/>
                                        </pfx2:ErrorCode>
                                        <pfx2:ErrorStatus>
                                            <xsl:value-of select="&quot;InternalServerError&quot;"/>
                                        </pfx2:ErrorStatus>
                                    </pfx2:Error>
                                </pfx2:RequestBody>
                            </pfx2:SRFEscalateMalwareCaseRs>
                        </pfx:Body>
                    </pfx:Envelope>
                </Body>
            </ns:ActivityInput>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="SendACSLog(39)">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>235</pd:x>
        <pd:y>82</pd:y>
        <config>
            <processName>/Utilities/ACSDBLogger/SendDBLog.process</processName>
            <spawn>true</spawn>
        </config>
        <pd:inputBindings>
            <ns3:InsertTaskLog>
                <ns3:serviceID>
                    <xsl:value-of select="$Parse-XML/Neuron/ServiceID"/>
                </ns3:serviceID>
                <ns3:stepTypeID>
                    <xsl:value-of select="39"/>
                </ns3:stepTypeID>
                <ns3:message>
                    <xsl:value-of select="tib:render-xml($JMS-Queue-Receiver/ns:ActivityOutput/Body/pfx:Envelope/pfx:Body/pfx2:SRFEscalateMalwareCaseRq[1],1)"/>
                </ns3:message>
            </ns3:InsertTaskLog>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Error Handling Process">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>892</pd:x>
        <pd:y>326</pd:y>
        <config>
            <processName>/Services/SharedServices/Error Handling Process.process</processName>
        </config>
        <pd:coercions>
            <pd:coercion xpath="$JMS-Queue-Receiver/ns:ActivityOutput/Body/pfx:Envelope/pfx:Body/*" element="pfx2:SRFEscalateMalwareCaseRq"/>
        </pd:coercions>
        <pd:inputBindings>
            <group>
                <ns1:SMF>
                    <ns1:SMFHeader>
                        <xsl:copy-of select="$JMS-Queue-Receiver/ns:ActivityOutput/Body/pfx:Envelope/pfx:Body/pfx2:SRFEscalateMalwareCaseRq/pfx2:RequestHeader/ancestor-or-self::*/namespace::node()"/>
                        <xsl:copy-of select="$JMS-Queue-Receiver/ns:ActivityOutput/Body/pfx:Envelope/pfx:Body/pfx2:SRFEscalateMalwareCaseRq/pfx2:RequestHeader/@*"/>
                        <xsl:copy-of select="$JMS-Queue-Receiver/ns:ActivityOutput/Body/pfx:Envelope/pfx:Body/pfx2:SRFEscalateMalwareCaseRq/pfx2:RequestHeader/node()"/>
                    </ns1:SMFHeader>
                    <ns1:SMFBody>
                        <ns1:Message>
                            <ns1:SOAPMessage>
                                <xsl:value-of select="tib:render-xml($JMS-Queue-Receiver/ns:ActivityOutput/Body/pfx:Envelope/pfx:Body/pfx2:SRFEscalateMalwareCaseRq[1]/pfx2:RequestBody,1)"/>
                            </ns1:SOAPMessage>
                        </ns1:Message>
                        <ns1:Error>
                            <ns1:src>
                                <xsl:value-of select="$_error/ns2:ErrorReport/ProcessStack"/>
                            </ns1:src>
                            <ns1:error_code>
                                <xsl:value-of select="$_error/ns2:ErrorReport/MsgCode"/>
                            </ns1:error_code>
                            <ns1:error_message>
                                <xsl:value-of select="$_error/ns2:ErrorReport/Msg"/>
                            </ns1:error_message>
                            <xsl:if test="$_error/ns2:ErrorReport/StackTrace">
                                <ns1:error_detail>
                                    <xsl:value-of select="$_error/ns2:ErrorReport/StackTrace"/>
                                </ns1:error_detail>
                            </xsl:if>
                        </ns1:Error>
                    </ns1:SMFBody>
                </ns1:SMF>
                <ns3:InsertTaskLog>
                    <xsl:choose>
                        <xsl:when test="tib:trim($Parse-XML/Neuron/ServiceID) !=&quot;&quot;">
                            <ns3:serviceID>
                                <xsl:value-of select="$Parse-XML/Neuron/ServiceID"/>
                            </ns3:serviceID>
                        </xsl:when>
                        <xsl:otherwise>
                            <ns3:serviceID>
                                <xsl:value-of select="TM:getGUID()"/>
                            </ns3:serviceID>
                        </xsl:otherwise>
                    </xsl:choose>
                    <ns3:stepTypeID>
                        <xsl:value-of select="9999"/>
                    </ns3:stepTypeID>
                    <xsl:if test="$_error/ns2:ErrorReport/StackTrace">
                        <ns3:message>
                            <xsl:value-of select="$_error/ns2:ErrorReport/StackTrace"/>
                        </ns3:message>
                    </xsl:if>
                </ns3:InsertTaskLog>
                <isESBLog>
                    <xsl:value-of select="1"/>
                </isESBLog>
            </group>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="GetNeuronServiceMainByServiceID">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>393</pd:x>
        <pd:y>81</pd:y>
        <config>
            <processName>/ExternalServices/ToACS/2.1 Subprocesses/Functions/SP/GetNeuronServiceMainByServiceID.process</processName>
        </config>
        <pd:inputBindings>
            <GetNeuronServiceMainByServiceID_Input>
                <ServiceId>
                    <xsl:value-of select="$Parse-XML/Neuron/ServiceID"/>
                </ServiceId>
            </GetNeuronServiceMainByServiceID_Input>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Parse SRF XML">
        <pd:type>com.tibco.plugin.xml.XMLParseActivity</pd:type>
        <pd:resourceType>ae.activities.XMLParseActivity</pd:resourceType>
        <pd:x>554</pd:x>
        <pd:y>77</pd:y>
        <config>
            <inputStyle>text</inputStyle>
            <xsdVersion>default</xsdVersion>
            <validateOutput>true</validateOutput>
            <term>
                <xsd:element name="NEURON" type="pfx9:NEURONFRSType"/>
            </term>
        </config>
        <pd:inputBindings>
            <xmlString>
                <xsl:value-of select="$GetNeuronServiceMainByServiceID/ns9:Resultsets/ns9:ResultSet1/ns9:Record1[1]/ns9:InputData"/>
            </xmlString>
        </pd:inputBindings>
    </pd:activity>
    <pd:activity name="Create Task">
        <pd:type>com.tibco.pe.core.CallProcessActivity</pd:type>
        <pd:resourceType>ae.process.subprocess</pd:resourceType>
        <pd:x>729</pd:x>
        <pd:y>83</pd:y>
        <config>
            <processName>/Services/Neuron Service/Functions/Call PSC CreateSR &amp; Act.process</processName>
            <spawn>true</spawn>
        </config>
        <pd:inputBindings>
            <root>
                <EscalateXml>
                    <xsl:value-of select="$JMS-Queue-Receiver/ns:ActivityOutput/Body/pfx:Envelope/pfx:Body/pfx2:SRFEscalateMalwareCaseRq[1]/pfx2:RequestBody/pfx2:inputXml"/>
                </EscalateXml>
                <xsl:copy-of select="$GetNeuronServiceMainByServiceID/ns9:Resultsets"/>
            </root>
        </pd:inputBindings>
    </pd:activity>
    <pd:transition>
        <pd:from>JMS Queue Receiver</pd:from>
        <pd:to>Parse XML</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Reply to JMS Message</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse XML</pd:from>
        <pd:to>SendACSLog(39)</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Catch</pd:from>
        <pd:to>Error Handling Process</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Reply-to-JMS-Message-1</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>SendACSLog(39)</pd:from>
        <pd:to>GetNeuronServiceMainByServiceID</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Error Handling Process</pd:from>
        <pd:to>Reply-to-JMS-Message-1</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>GetNeuronServiceMainByServiceID</pd:from>
        <pd:to>Parse SRF XML</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Parse SRF XML</pd:from>
        <pd:to>Create Task</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Create Task</pd:from>
        <pd:to>Reply to JMS Message</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>